{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/account_timeline/index.jsx"],"names":["emptyList","ImmutableList","RemoteHint","_ref2","url","_jsx","TimelineHint","resource","FormattedMessage","id","defaultMessage","AccountTimeline","ImmutablePureComponent","constructor","arguments","handleLoadMore","maxId","this","props","dispatch","expandAccountTimeline","accountId","withReplies","tagged","params","_load","fetchAccount","expandAccountFeaturedTimeline","fetchFeaturedTags","me","connectTimeline","componentDidMount","acct","lookupAccount","componentDidUpdate","prevProps","disconnectTimeline","componentWillUnmount","render","statusIds","featuredStatusIds","isLoading","hasMore","blockedBy","suspended","isAccount","hidden","multiColumn","remote","remoteUrl","signedIn","context","identity","isEmpty","Column","LoadingIndicator","BundleColumnError","errorType","emptyMessage","forceEmptyState","LimitedAccountHint","remoteMessage","ColumnBackButton","StatusList","prepend","HeaderContainer","hideTabs","alwaysPrepend","append","scrollKey","onLoadMore","bindToDocument","timelineId","NotSignedInIndicator","contextTypes","PropTypes","object","propTypes","shape","string","isRequired","func","ImmutablePropTypes","list","bool","connect","mapStateToProps","state","_ref","getIn","normalizeForLookup","path","getAccountHidden"],"mappings":"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","file":"js/features/account_timeline-3fa9f019ad4c45925a1b.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { NotSignedInIndicator } from 'mastodon/components/not_signed_in_indicator';\nimport { TimelineHint } from 'mastodon/components/timeline_hint';\nimport BundleColumnError from 'mastodon/features/ui/components/bundle_column_error';\nimport { me } from 'mastodon/initial_state';\nimport { normalizeForLookup } from 'mastodon/reducers/accounts_map';\nimport { getAccountHidden } from 'mastodon/selectors';\n\nimport { lookupAccount, fetchAccount } from '../../actions/accounts';\nimport { fetchFeaturedTags } from '../../actions/featured_tags';\nimport { expandAccountFeaturedTimeline, expandAccountTimeline, connectTimeline, disconnectTimeline } from '../../actions/timelines';\nimport ColumnBackButton from '../../components/column_back_button';\nimport { LoadingIndicator } from '../../components/loading_indicator';\nimport StatusList from '../../components/status_list';\nimport Column from '../ui/components/column';\n\nimport LimitedAccountHint from './components/limited_account_hint';\nimport HeaderContainer from './containers/header_container';\n\nconst emptyList = ImmutableList();\n\nconst mapStateToProps = (state, { params: { acct, id, tagged }, withReplies = false }) => {\n  const accountId = id || state.getIn(['accounts_map', normalizeForLookup(acct)]);\n\n  if (accountId === null) {\n    return {\n      isLoading: false,\n      isAccount: false,\n      statusIds: emptyList,\n    };\n  } else if (!accountId) {\n    return {\n      isLoading: true,\n      statusIds: emptyList,\n    };\n  }\n\n  const path = withReplies ? `${accountId}:with_replies` : `${accountId}${tagged ? `:${tagged}` : ''}`;\n\n  return {\n    accountId,\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    statusIds: state.getIn(['timelines', `account:${path}`, 'items'], emptyList),\n    featuredStatusIds: withReplies ? ImmutableList() : state.getIn(['timelines', `account:${accountId}:pinned${tagged ? `:${tagged}` : ''}`, 'items'], emptyList),\n    isLoading: state.getIn(['timelines', `account:${path}`, 'isLoading']),\n    hasMore: state.getIn(['timelines', `account:${path}`, 'hasMore']),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    hidden: getAccountHidden(state, accountId),\n    blockedBy: state.getIn(['relationships', accountId, 'blocked_by'], false),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.statuses' defaultMessage='Older posts' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nclass AccountTimeline extends ImmutablePureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.shape({\n      acct: PropTypes.string,\n      id: PropTypes.string,\n      tagged: PropTypes.string,\n    }).isRequired,\n    accountId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    statusIds: ImmutablePropTypes.list,\n    featuredStatusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    withReplies: PropTypes.bool,\n    blockedBy: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    hidden: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  _load () {\n    const { accountId, withReplies, params: { tagged }, dispatch } = this.props;\n\n    dispatch(fetchAccount(accountId));\n\n    if (!withReplies) {\n      dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n    }\n\n    dispatch(fetchFeaturedTags(accountId));\n    dispatch(expandAccountTimeline(accountId, { withReplies, tagged }));\n\n    if (accountId === me) {\n      dispatch(connectTimeline(`account:${me}`));\n    }\n  }\n\n  componentDidMount () {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (accountId) {\n      this._load();\n    } else {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params: { acct, tagged }, accountId, withReplies, dispatch } = this.props;\n\n    if (prevProps.accountId !== accountId && accountId) {\n      this._load();\n    } else if (prevProps.params.acct !== acct) {\n      dispatch(lookupAccount(acct));\n    } else if (prevProps.params.tagged !== tagged) {\n      if (!withReplies) {\n        dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n      }\n      dispatch(expandAccountTimeline(accountId, { withReplies, tagged }));\n    }\n\n    if (prevProps.accountId === me && accountId !== me) {\n      dispatch(disconnectTimeline(`account:${me}`));\n    }\n  }\n\n  componentWillUnmount () {\n    const { dispatch, accountId } = this.props;\n\n    if (accountId === me) {\n      dispatch(disconnectTimeline(`account:${me}`));\n    }\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandAccountTimeline(this.props.accountId, { maxId, withReplies: this.props.withReplies, tagged: this.props.params.tagged }));\n  };\n\n  render () {\n    const { accountId, statusIds, featuredStatusIds, isLoading, hasMore, blockedBy, suspended, isAccount, hidden, multiColumn, remote, remoteUrl } = this.props;\n\n    const { signedIn } = this.context.identity;\n\n    if (isLoading && statusIds.isEmpty()) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    } else if (!isLoading && !isAccount) {\n      return (\n        <BundleColumnError multiColumn={multiColumn} errorType='routing' />\n      );\n    }\n\n    let emptyMessage;\n\n    const forceEmptyState = suspended || blockedBy || hidden;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (blockedBy) {\n      emptyMessage = <FormattedMessage id='empty_column.account_unavailable' defaultMessage='Profile unavailable' />;\n    } else if (remote && statusIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='empty_column.account_timeline' defaultMessage='No posts found' />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return signedIn ? (\n      <Column>\n        <ColumnBackButton multiColumn={multiColumn} />\n\n        <StatusList\n          prepend={<HeaderContainer accountId={this.props.accountId} hideTabs={forceEmptyState} tagged={this.props.params.tagged} />}\n          alwaysPrepend\n          append={remoteMessage}\n          scrollKey='account_timeline'\n          statusIds={forceEmptyState ? emptyList : statusIds}\n          featuredStatusIds={featuredStatusIds}\n          isLoading={isLoading}\n          hasMore={!forceEmptyState && hasMore}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          timelineId='account'\n        />\n      </Column>\n    ) : <NotSignedInIndicator />\n  }\n\n}\n\nexport default connect(mapStateToProps)(AccountTimeline);\n"],"sourceRoot":""}