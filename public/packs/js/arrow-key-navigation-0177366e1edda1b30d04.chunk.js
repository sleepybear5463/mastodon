(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["arrow-key-navigation"],{

/***/ "./node_modules/arrow-key-navigation/dist-web/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/arrow-key-navigation/dist-web/index.js ***!
  \*************************************************************/
/*! exports provided: register, setFocusTrapTest, unregister */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"register\", function() { return register; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setFocusTrapTest\", function() { return setFocusTrapTest; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unregister\", function() { return unregister; });\n/**\n * Makes it so the left and right arrows change focus, ala Tab/Shift+Tab. This is mostly designed\n * for KaiOS devices.\n */\n/* global document, addEventListener, removeEventListener, getSelection */\n// TODO: email/number types are a special type, in that they return selectionStart/selectionEnd as null\n// As far as I can tell, there is no way to actually get the caret position from these inputs. So we\n// don't do the proper caret handling for those inputs, unfortunately.\n// https://html.spec.whatwg.org/multipage/input.html#do-not-apply\nvar textInputTypes = ['text', 'search', 'url', 'password', 'tel'];\nvar checkboxRadioInputTypes = ['checkbox', 'radio'];\nvar focusTrapTest = undefined;\n// This query is adapted from a11y-dialog\n// https://github.com/edenspiekermann/a11y-dialog/blob/cf4ed81/a11y-dialog.js#L6-L18\nvar focusablesQuery = 'a[href], area[href], input, select, textarea, ' + 'button, iframe, object, embed, [contenteditable], [tabindex], ' + 'video[controls], audio[controls], summary';\nfunction getActiveElement() {\n  var activeElement = document.activeElement;\n  while (activeElement.shadowRoot) {\n    activeElement = activeElement.shadowRoot.activeElement;\n  }\n  return activeElement;\n}\nfunction isFocusable(element) {\n  return element.matches(focusablesQuery) && !element.disabled && !/^-/.test(element.getAttribute('tabindex') || '') && !element.hasAttribute('inert') && (\n  // see https://github.com/GoogleChrome/inert-polyfill\n  element.offsetWidth > 0 || element.offsetHeight > 0);\n}\nfunction getFocusTrapParent(element) {\n  if (!focusTrapTest) {\n    return;\n  }\n  var parent = element.parentElement;\n  while (parent) {\n    if (focusTrapTest(parent)) {\n      return parent;\n    }\n    parent = parent.parentElement;\n  }\n}\nfunction shouldIgnoreEvent(activeElement, forwardDirection) {\n  var tagName = activeElement.tagName;\n  var isTextarea = tagName === 'TEXTAREA';\n  var isTextInput = tagName === 'INPUT' && textInputTypes.indexOf(activeElement.getAttribute('type').toLowerCase()) !== -1;\n  var isContentEditable = activeElement.hasAttribute('contenteditable');\n  if (!isTextarea && !isTextInput && !isContentEditable) {\n    return false;\n  }\n  var selectionStart;\n  var selectionEnd;\n  var len;\n  if (isContentEditable) {\n    var selection = getSelection();\n    selectionStart = selection.anchorOffset;\n    selectionEnd = selection.focusOffset;\n    len = activeElement.textContent.length;\n  } else {\n    selectionStart = activeElement.selectionStart;\n    selectionEnd = activeElement.selectionEnd;\n    len = activeElement.value.length;\n  }\n  // if the cursor is inside of a textarea/input, then don't focus to the next/previous element\n  // unless the cursor is at the beginning or the end\n  if (!forwardDirection && selectionStart === selectionEnd && selectionStart === 0) {\n    return false;\n  } else if (forwardDirection && selectionStart === selectionEnd && selectionStart === len) {\n    return false;\n  }\n  return true;\n}\nfunction getNextCandidateNodeForShadowDomPolyfill(root, targetElement, forwardDirection, filter) {\n  // When the shadydom polyfill is running, we can't use TreeWalker on ShadowRoots because\n  // they aren't real Nodes. So we do this workaround where we run TreeWalker on the\n  // children instead.\n  var nodes = Array.prototype.slice.call(root.querySelectorAll('*'));\n  var idx = nodes.indexOf(targetElement);\n  if (forwardDirection) {\n    nodes = nodes.slice(idx + 1);\n  } else {\n    if (idx === -1) {\n      idx = nodes.length;\n    }\n    nodes = nodes.slice(0, idx);\n    nodes.reverse();\n  }\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    if (node instanceof HTMLElement && filter.acceptNode(node) === NodeFilter.FILTER_ACCEPT) {\n      return node;\n    }\n  }\n  return undefined;\n}\nfunction getNextCandidateNode(root, targetElement, forwardDirection, filter) {\n  var walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, filter);\n  if (targetElement) {\n    walker.currentNode = targetElement;\n  }\n  if (forwardDirection) {\n    return walker.nextNode();\n  } else if (targetElement) {\n    return walker.previousNode();\n  }\n  // iterating backwards through shadow root, use last child\n  return walker.lastChild();\n}\nfunction isShadowDomPolyfill() {\n  return typeof ShadowRoot !== 'undefined' && (\n  // ShadowRoot.polyfill is just a hack for our unit tests\n  'polyfill' in ShadowRoot || !ShadowRoot.toString().includes('[native code]'));\n}\nfunction getNextNode(root, targetElement, forwardDirection) {\n  var filter = {\n    acceptNode: function acceptNode(node) {\n      return node === targetElement || node.shadowRoot || isFocusable(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    }\n  };\n  // TODO: remove this when we don't need to support the Shadow DOM polyfill\n  var nextNode = isShadowDomPolyfill() && root instanceof ShadowRoot ? getNextCandidateNodeForShadowDomPolyfill(root, targetElement, forwardDirection, filter) : getNextCandidateNode(root, targetElement, forwardDirection, filter);\n  if (nextNode && nextNode.shadowRoot) {\n    // push into the shadow DOM\n    return getNextNode(nextNode.shadowRoot, null, forwardDirection);\n  }\n  if (!nextNode && root.host) {\n    // pop out of the shadow DOM\n    return getNextNode(root.host.getRootNode(), root.host, forwardDirection);\n  }\n  return nextNode;\n}\nfunction focusNextOrPrevious(event, key) {\n  var activeElement = getActiveElement();\n  var forwardDirection = key === 'ArrowRight';\n  if (shouldIgnoreEvent(activeElement, forwardDirection)) {\n    return;\n  }\n  var root = getFocusTrapParent(activeElement) || activeElement.getRootNode();\n  var nextNode = getNextNode(root, activeElement, forwardDirection);\n  if (nextNode && nextNode !== activeElement) {\n    nextNode.focus();\n    event.preventDefault();\n  }\n}\nfunction handleEnter(event) {\n  var activeElement = getActiveElement();\n  if (activeElement.tagName === 'INPUT' && checkboxRadioInputTypes.indexOf(activeElement.getAttribute('type').toLowerCase()) !== -1) {\n    // Explicitly override \"enter\" on an input and make it fire the checkbox/radio\n    activeElement.click();\n    event.preventDefault();\n  }\n}\nfunction keyListener(event) {\n  if (event.altKey || event.metaKey || event.ctrlKey) {\n    return; // ignore e.g. Alt-Left and Ctrl-Right, which are used to switch browser tabs or navigate back/forward\n  }\n\n  var key = event.key;\n  switch (key) {\n    case 'ArrowLeft':\n    case 'ArrowRight':\n      {\n        focusNextOrPrevious(event, key);\n        break;\n      }\n    case 'Enter':\n      {\n        handleEnter(event);\n        break;\n      }\n  }\n}\n/**\n * Start listening for keyboard events. Attaches a listener to the window.\n */\nfunction register() {\n  addEventListener('keydown', keyListener);\n}\n/**\n * Stop listening for keyboard events. Unattaches a listener to the window.\n */\nfunction unregister() {\n  removeEventListener('keydown', keyListener);\n}\n/**\n * Set a focus trap test to identify any focus traps in the DOM, i.e. a top-level DOM node that indicates the root\n * of a focus trap. Once this is set, if focus changes within the focus trap, then will not leave the focus trap.\n * @param test: the test function\n * @see https://w3c.github.io/aria-practices/examples/dialog-modal/dialog.html\n */\nfunction setFocusTrapTest(test) {\n  focusTrapTest = test;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/arrow-key-navigation/dist-web/index.js\n");

/***/ })

}]);